import { Payload } from './types';
import { PayloadConverter } from './payload-converter';
/**
 * Used by the framework to serialize/deserialize method parameters that need to be sent over the
 * wire.
 *
 * Implement this in order to customize worker data serialization or use the default data converter which supports `Uint8Array` and JSON serializables.
 */
export interface DataConverter {
    toPayload<T>(value: T): Payload;
    fromPayload<T>(payload: Payload): T;
    /**
     * Implements conversion of a list of values.
     *
     * @param values JS values to convert to Payloads.
     * @return converted value
     * @throws DataConverterError if conversion of the value passed as parameter failed for any
     *     reason.
     */
    toPayloads(...values: any[]): Payload[] | undefined;
    /**
     * Implements conversion of an array of values of different types. Useful for deserializing
     * arguments of function invocations.
     *
     * @param index index of the value in the payloads
     * @param content serialized value to convert to JS values.
     * @return converted JS value
     * @throws DataConverterError if conversion of the data passed as parameter failed for any
     *     reason.
     */
    fromPayloads<T>(index: number, content?: Payload[] | null): T;
}
export declare class CompositeDataConverter implements DataConverter {
    readonly converters: PayloadConverter[];
    readonly converterByEncoding: Map<string, PayloadConverter>;
    constructor(...converters: PayloadConverter[]);
    toPayload<T>(value: T): Payload;
    fromPayload<T>(payload: Payload): T;
    toPayloads(...values: any[]): Payload[] | undefined;
    fromPayloads<T>(index: number, payloads?: Payload[] | null): T;
}
export declare function arrayFromPayloads(converter: DataConverter, content?: Payload[] | null): any[];
export declare function mapToPayloads<K extends string>(converter: DataConverter, source: Record<K, any>): Record<K, Payload>;
export declare const defaultDataConverter: CompositeDataConverter;
