import * as iface from '@temporalio/proto';
export declare class WorkflowExecutionTerminatedError extends Error {
    readonly details: any[];
    readonly identity?: string | undefined;
    readonly name: string;
    constructor(message: string, details: any[], identity?: string | undefined);
}
export declare class WorkflowExecutionTimedOutError extends Error {
    readonly retryState: iface.temporal.api.enums.v1.RetryState;
    readonly name: string;
    constructor(message: string, retryState: iface.temporal.api.enums.v1.RetryState);
}
export declare class WorkflowExecutionFailedError extends Error {
    readonly name: string;
}
export declare class WorkflowExecutionCancelledError extends Error {
    readonly details: any[];
    readonly name: string;
    constructor(message: string, details: any[]);
}
export declare class WorkflowExecutionContinuedAsNewError extends Error {
    readonly newExecutionRunId: string;
    readonly name: string;
    constructor(message: string, newExecutionRunId: string);
}
/**
 * Used to denote where the cancellation was originated
 *
 * - external - The workflow was cancelled by an external API call
 * - internal - Cancellation was requested by using `cancel` from within a workflow
 */
export declare type CancellationSource = 'internal' | 'external';
/**
 * Thrown in workflow when it is requested to be cancelled either externally or internally.
 *
 * @see {@link CancellationSource}
 */
export declare class CancellationError extends Error {
    readonly source: CancellationSource;
    readonly name: string;
    constructor(message: string, source: CancellationSource);
}
/**
 * Used in different parts of the project to signal that something unexpected has happened
 */
export declare class IllegalStateError extends Error {
    readonly name: string;
}
/**
 * Thrown in workflow when it trys to do something that non-deterministic such as construct a WeakMap()
 */
export declare class DeterminismViolationError extends Error {
    readonly name: string;
}
