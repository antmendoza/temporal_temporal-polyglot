import * as iface from '@temporalio/proto';
import { ActivityOptions, CancellationFunctionFactory, Scope, Workflow } from './interfaces';
export declare type ResolveFunction<T = any> = (val: T) => any;
export declare type RejectFunction<E = any> = (val: E) => any;
export interface Completion {
    resolve: ResolveFunction;
    reject: RejectFunction;
    scope: Scope;
}
export declare type HookType = 'init' | 'resolve' | 'before' | 'after';
export declare type PromiseHook = (t: HookType, p: Promise<any>, pp?: Promise<any>) => void;
export interface PromiseData {
    scope: Scope;
    cancellable: boolean;
}
export interface Runtime {
    registerPromiseHook(hook: PromiseHook): void;
    setPromiseData(p: Promise<any>, s: PromiseData): void;
    getPromiseData(p: Promise<any>): PromiseData | undefined;
}
/**
 * Track command sequences and callbacks, accumulate commands
 */
export interface State {
    completions: Map<number, Completion>;
    rootScope: Scope;
    scopeStack: Scope[];
    childScopes: Map<Scope, Set<Scope>>;
    commands: iface.coresdk.workflow_commands.IWorkflowCommand[];
    completed: boolean;
    cancelled: boolean;
    nextSeq: number;
    /**
     * This is set every time the workflow executes an activation
     */
    now: number;
    workflow?: Workflow;
    activator?: Activator;
    runtime?: Runtime;
    workflowId?: string;
    taskQueue?: string;
    activityDefaults?: ActivityOptions;
}
export declare const state: State;
export declare type HandlerFunction<K extends keyof iface.coresdk.workflow_activation.IWFActivationJob> = (activation: NonNullable<iface.coresdk.workflow_activation.IWFActivationJob[K]>) => void;
export declare type WorkflowTaskHandler = {
    [P in keyof iface.coresdk.workflow_activation.IWFActivationJob]: HandlerFunction<P>;
};
export declare class Activator implements WorkflowTaskHandler {
    startWorkflow(activation: iface.coresdk.workflow_activation.IStartWorkflow): void;
    cancelWorkflow(_activation: iface.coresdk.workflow_activation.ICancelWorkflow): void;
    fireTimer(activation: iface.coresdk.workflow_activation.IFireTimer): void;
    resolveActivity(activation: iface.coresdk.workflow_activation.IResolveActivity): void;
    queryWorkflow(activation: iface.coresdk.workflow_activation.IQueryWorkflow): void;
    signalWorkflow(activation: iface.coresdk.workflow_activation.ISignalWorkflow): void;
    updateRandomSeed(activation: iface.coresdk.workflow_activation.IUpdateRandomSeed): void;
    removeFromCache(): void;
}
/**
 * @returns a boolean indicating whether the job was processed or ignored
 */
export declare function activate(encodedActivation: Uint8Array, jobIndex: number): boolean;
export declare function concludeActivation(taskToken: Uint8Array): Uint8Array;
export declare function currentScope(): Scope;
export declare function pushScope(scope: Scope): Scope;
export declare function propagateCancellation(method: 'requestCancel' | 'completeCancel'): CancellationFunctionFactory;
export declare function childScope<T>(makeRequestCancellation: CancellationFunctionFactory, makeCompleteCancellation: CancellationFunctionFactory, fn: () => Promise<T>): Promise<T>;
