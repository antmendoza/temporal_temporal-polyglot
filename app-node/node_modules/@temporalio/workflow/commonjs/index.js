"use strict";
/**
 * This library provides tools required for authoring workflows.
 *
 * ## Usage
 * See the [tutorial](https://docs.temporal.io/docs/node/hello-world#workflows) for writing your first workflow.
 *
 * ### Timers
 *
 * The recommended way of scheduling timers is by using the {@link sleep} function.
 * We've replaced `setTimeout` and `clearTimeout` with deterministic versions so these are also usable but have a limitation that they don't play well with [cancellation scopes](https://docs.temporal.io/docs/node/workflow-scopes-and-cancellation).
 *
 * <!--SNIPSTART nodejs-sleep-workflow-->
 * <!--SNIPEND-->
 *
 * ### Activities
 *
 * To schedule activities in the system, simply import an activity function from any registered activity file and call it like a normal function, the Temporal workflow runtime will replace the imported function with a stub which will schedules an activity.
 *
 * Activities run with the worker's configured {@link WorkerOptions.activityDefaults | activityDefaults}, use {@link ContextImpl.configure | Context.configure} in order to customize the {@link ActivityOptions | activity options}.
 *
 * <!--SNIPSTART nodejs-schedule-activity-workflow-->
 * <!--SNIPEND-->
 *
 * ### Signals
 *
 * To add signal handlers to a workflow, add a signals property to the exported workflow object.
 * Signal handlers can return either `void` or `Promise<void>`, you may schedule activities and timers from a signal handler.
 *
 * #### Interface
 * <!--SNIPSTART nodejs-workflow-signal-interface-->
 * <!--SNIPEND-->
 *
 * #### Implementation
 * <!--SNIPSTART nodejs-workflow-signal-implementation-->
 * <!--SNIPEND-->
 *
 * ### Deterministic built-ins
 * It is safe to call `Math.random()` and `Date()` in workflow code as they are replaced with deterministic versions. We also provide a deterministic {@link uuid4} function for convenience.
 *
 * ### [Cancellation and scopes](https://docs.temporal.io/docs/node/workflow-scopes-and-cancellation)
 * - {@link cancel}
 * - {@link shield}
 * - {@link cancellationScope}
 * @module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.scheduleActivity = exports.validateActivityOptions = exports.uuid4 = exports.shield = exports.cancellationScope = exports.cancel = exports.sleep = exports.ContextImpl = exports.Context = exports.DeterminismViolationError = exports.CancellationError = void 0;
require("./global-overrides");
var errors_1 = require("./errors");
Object.defineProperty(exports, "CancellationError", { enumerable: true, get: function () { return errors_1.CancellationError; } });
Object.defineProperty(exports, "DeterminismViolationError", { enumerable: true, get: function () { return errors_1.DeterminismViolationError; } });
var workflow_1 = require("./workflow");
Object.defineProperty(exports, "Context", { enumerable: true, get: function () { return workflow_1.Context; } });
Object.defineProperty(exports, "ContextImpl", { enumerable: true, get: function () { return workflow_1.ContextImpl; } });
Object.defineProperty(exports, "sleep", { enumerable: true, get: function () { return workflow_1.sleep; } });
Object.defineProperty(exports, "cancel", { enumerable: true, get: function () { return workflow_1.cancel; } });
Object.defineProperty(exports, "cancellationScope", { enumerable: true, get: function () { return workflow_1.cancellationScope; } });
Object.defineProperty(exports, "shield", { enumerable: true, get: function () { return workflow_1.shield; } });
Object.defineProperty(exports, "uuid4", { enumerable: true, get: function () { return workflow_1.uuid4; } });
Object.defineProperty(exports, "validateActivityOptions", { enumerable: true, get: function () { return workflow_1.validateActivityOptions; } });
Object.defineProperty(exports, "scheduleActivity", { enumerable: true, get: function () { return workflow_1.scheduleActivity; } });
