"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeterminismViolationError = exports.IllegalStateError = exports.CancellationError = exports.WorkflowExecutionContinuedAsNewError = exports.WorkflowExecutionCancelledError = exports.WorkflowExecutionFailedError = exports.WorkflowExecutionTimedOutError = exports.WorkflowExecutionTerminatedError = void 0;
class WorkflowExecutionTerminatedError extends Error {
    constructor(message, details, identity) {
        super(message);
        this.details = details;
        this.identity = identity;
        this.name = 'WorkflowExecutionTerminatedError';
    }
}
exports.WorkflowExecutionTerminatedError = WorkflowExecutionTerminatedError;
class WorkflowExecutionTimedOutError extends Error {
    constructor(message, retryState) {
        super(message);
        this.retryState = retryState;
        this.name = 'WorkflowExecutionTimedOutError';
    }
}
exports.WorkflowExecutionTimedOutError = WorkflowExecutionTimedOutError;
class WorkflowExecutionFailedError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'WorkflowExecutionFailedError';
    }
}
exports.WorkflowExecutionFailedError = WorkflowExecutionFailedError;
class WorkflowExecutionCancelledError extends Error {
    constructor(message, details) {
        super(message);
        this.details = details;
        this.name = 'WorkflowExecutionCancelledError';
    }
}
exports.WorkflowExecutionCancelledError = WorkflowExecutionCancelledError;
class WorkflowExecutionContinuedAsNewError extends Error {
    constructor(message, newExecutionRunId) {
        super(message);
        this.newExecutionRunId = newExecutionRunId;
        this.name = 'WorkflowExecutionContinuedAsNewError';
    }
}
exports.WorkflowExecutionContinuedAsNewError = WorkflowExecutionContinuedAsNewError;
/**
 * Thrown in workflow when it is requested to be cancelled either externally or internally.
 *
 * @see {@link CancellationSource}
 */
class CancellationError extends Error {
    constructor(message, source) {
        super(message);
        this.source = source;
        this.name = 'CancellationError';
    }
}
exports.CancellationError = CancellationError;
/**
 * Used in different parts of the project to signal that something unexpected has happened
 */
class IllegalStateError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'IllegalStateError';
    }
}
exports.IllegalStateError = IllegalStateError;
/**
 * Thrown in workflow when it trys to do something that non-deterministic such as construct a WeakMap()
 */
class DeterminismViolationError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'DeterminismViolationError';
    }
}
exports.DeterminismViolationError = DeterminismViolationError;
