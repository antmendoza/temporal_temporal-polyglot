import { ActivityFunction, ActivityOptions, RemoteActivityOptions } from './interfaces';
/**
 * Asynchronous sleep.
 *
 * Schedules a timer on the Temporal service.
 * The returned promise is {@link cancel | cancellable}.
 *
 * @param ms milliseconds to sleep for
 */
export declare function sleep(ms: number): Promise<void>;
export interface ActivityInfo {
    name: string;
    type: string;
}
export declare type InternalActivityFunction<P extends any[], R> = ActivityFunction<P, R> & ActivityInfo;
/**
 * @hidden
 */
export declare function validateActivityOptions(options: ActivityOptions): asserts options is RemoteActivityOptions;
/**
 * @hidden
 */
export declare function scheduleActivity<R>(activityType: string, args: any[], options: ActivityOptions): Promise<R>;
export declare class ContextImpl {
    /**
     * @protected
     */
    constructor();
    /**
     * Configure an activity function with given {@link ActivityOptions}
     * Activities use the worker options's {@link WorkerOptions.activityDefaults | activityDefaults} unless configured otherwise.
     *
     * @typeparam P type of parameters of activity function, e.g `[string, string]` for `(a: string, b: string) => Promise<number>`
     * @typeparam R return type of activity function, e.g `number` for `(a: string, b: string) => Promise<number>`
     *
     * @param activity either an activity name if triggering an activity in another language, a tuple of [module, name] for untyped activities (e.g. ['@activities', 'greet']) or an imported activity function.
     * @param options partial {@link ActivityOptions} object, any attributes provided here override the provided activity's options
     *
     * @example
     * ```ts
     * import { Context } from '@temporalio/workflow';
     * import { httpGet } from '@activities';
     *
     * const httpGetWithCustomTimeout = Context.configure(httpGet, {
     *   type: 'remote',
     *   scheduleToCloseTimeout: '30 minutes',
     * });
     *
     * // Example of creating an activity from string
     * // Passing type parameters is optional, configured function will be untyped unless provided
     * const httpGetFromJava = Context.configure<[string, number], number>('SomeJavaMethod'); // Use worker activityDefaults when 2nd parameter is omitted
     *
     * export function main(): Promise<void> {
     *   const response = await httpGetWithCustomTimeout('http://example.com');
     *   // ...
     * }
     * ```
     */
    configure<P extends any[], R>(activity: string | [string, string] | ActivityFunction<P, R>, options?: ActivityOptions | undefined): ActivityFunction<P, R>;
    /**
     * Returns whether or not this workflow received a cancellation request.
     *
     * The workflow might still be running in case {@link CancellationError}s were caught.
     */
    get cancelled(): boolean;
}
/**
 * Holds context of current running workflow
 */
export declare const Context: ContextImpl;
/**
 * Wraps Promise returned from `fn` with a cancellation scope.
 * The returned Promise may be be cancelled with `cancel()` and will be cancelled
 * if a parent scope is cancelled, e.g. when the entire workflow is cancelled.
 *
 * @see {@link https://docs.temporal.io/docs/node/workflow-scopes-and-cancellation | Workflow scopes and cancellation}
 */
export declare function cancellationScope<T>(fn: () => Promise<T>): Promise<T>;
/**
 * Wraps the Promise returned from `fn` with a shielded scope.
 * Any child scopes of this scope will *not* be cancelled if `shield` is cancelled.
 * By default `shield` throws the original {@link CancellationError} in order for any awaiter
 * to immediately be notified of the cancellation.
 * @param throwOnCancellation - Pass false in case the result of the shielded `Promise` is needed
 * despite cancellation. To see if the workflow was cancelled while waiting, check `Context.cancelled`.
 * @see {@link https://docs.temporal.io/docs/node/workflow-scopes-and-cancellation | Workflow scopes and cancellation}
 */
export declare function shield<T>(fn: () => Promise<T>, throwOnCancellation?: boolean): Promise<T>;
/**
 * Cancel a scope created by an activity, timer or cancellationScope.
 *
 * @see {@link https://docs.temporal.io/docs/node/workflow-scopes-and-cancellation | Workflow scopes and cancellation}
 */
export declare function cancel(promise: Promise<any>, reason?: string): void;
/**
 * Generate an RFC compliant V4 uuid.
 * Uses the workflow's deterministic PRNG making it safe for use within a workflow.
 * This function is cryptograpically insecure.
 * See the {@link https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid | stackoverflow discussion}.
 */
export declare function uuid4(): string;
