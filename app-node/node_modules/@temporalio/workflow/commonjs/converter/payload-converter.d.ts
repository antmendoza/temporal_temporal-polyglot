import { Payload } from './types';
/**
 * Used by the framework to serialize/deserialize method parameters that need to be sent over the
 * wire.
 *
 * @author fateev
 */
export interface PayloadConverter {
    encodingType: string;
    /**
     * TODO: Fix comment in https://github.com/temporalio/sdk-java/blob/85593dbfa99bddcdf54c7196d2b73eeb23e94e9e/temporal-sdk/src/main/java/io/temporal/common/converter/DataConverter.java#L46
     * Implements conversion of value to payload
     *
     * @param value JS value to convert.
     * @return converted value
     * @throws DataConverterException if conversion of the value passed as parameter failed for any
     *     reason.
     */
    toData(value: unknown): Payload | undefined;
    /**
     * Implements conversion of payload to value.
     *
     * @param content Serialized value to convert to a JS value.
     * @return converted JS value
     * @throws DataConverterException if conversion of the data passed as parameter failed for any
     *     reason.
     */
    fromData<T>(content: Payload): T;
}
/**
 * Converts between JS undefined and NULL Payload
 */
export declare class UndefinedPayloadConverter implements PayloadConverter {
    encodingType: "binary/null";
    toData(value: unknown): Payload | undefined;
    fromData<T>(_content: Payload): T;
}
/**
 * Converts between non-undefined values and serialized JSON Payload
 */
export declare class JsonPayloadConverter implements PayloadConverter {
    encodingType: "json/plain";
    toData(value: unknown): Payload | undefined;
    fromData<T>(content: Payload): T;
}
/**
 * Converts between binary data types and RAW Payload
 */
export declare class BinaryPayloadConverter implements PayloadConverter {
    encodingType: "binary/plain";
    toData(value: unknown): Payload | undefined;
    fromData<T>(content: Payload): T;
}
