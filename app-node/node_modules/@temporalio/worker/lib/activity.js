"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Activity = void 0;
const abort_controller_1 = require("abort-controller");
const internals_1 = require("@temporalio/activity/lib/internals");
const activity_1 = require("@temporalio/activity");
class Activity {
    // TODO: get all of the atributes required for setting the ActivityContext
    constructor(info, fn, args, dataConverter, heartbeatCallback) {
        this.info = info;
        this.fn = fn;
        this.args = args;
        this.dataConverter = dataConverter;
        this.heartbeatCallback = heartbeatCallback;
        this.cancelRequested = false;
        this.cancel = () => undefined;
        this.abortController = new abort_controller_1.AbortController();
        const promise = new Promise((_, reject) => {
            this.cancel = (reason) => {
                this.cancelRequested = true;
                this.abortController.abort();
                reject(new activity_1.CancellationError(reason));
            };
        });
        this.context = new activity_1.Context(info, promise, this.abortController.signal, this.heartbeatCallback);
        promise.catch(() => undefined);
    }
    run() {
        return internals_1.asyncLocalStorage.run(this.context, async () => {
            try {
                const result = await this.fn(...this.args);
                if (this.cancelRequested) {
                    return { canceled: {} };
                }
                return { completed: { result: this.dataConverter.toPayload(result) } };
            }
            catch (err) {
                if (this.cancelRequested) {
                    return { canceled: {} };
                }
                return { failed: { failure: (err === null || err === void 0 ? void 0 : err.message) ? { message: err.message } : undefined } };
            }
        });
    }
}
exports.Activity = Activity;
