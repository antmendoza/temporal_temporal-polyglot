import ivm from 'isolated-vm';
import * as otel from '@opentelemetry/api';
import Long from 'long';
import { coresdk } from '@temporalio/proto';
import * as internals from '@temporalio/workflow/commonjs/internals';
import { ActivityOptions } from '@temporalio/workflow';
import { Loader } from './loader';
export declare enum ApplyMode {
    ASYNC = "apply",
    SYNC = "applySync",
    IGNORED = "applyIgnored",
    SYNC_PROMISE = "applySyncPromise"
}
interface WorkflowModule {
    activate: ivm.Reference<typeof internals.activate>;
    concludeActivation: ivm.Reference<typeof internals.concludeActivation>;
}
export declare class Workflow {
    readonly id: string;
    readonly isolate: ivm.Isolate;
    readonly context: ivm.Context;
    readonly loader: Loader;
    readonly workflowModule: WorkflowModule;
    private constructor();
    static create(id: string, randomnessSeed: Long, taskQueue: string, activityDefaults: ActivityOptions, span?: otel.Span): Promise<Workflow>;
    registerActivities(activities: Map<string, Record<string, any>>, options: ActivityOptions): Promise<void>;
    inject(path: string, handler: () => any, applyMode?: ApplyMode, transferOptions?: ivm.TransferOptionsBidirectional): Promise<void>;
    activate(taskToken: Uint8Array, activation: coresdk.workflow_activation.IWFActivation): Promise<Uint8Array>;
    registerImplementation(path: string): Promise<void>;
    /**
     * Dispose of the isolate and context.
     * Do not use this Workflow instance after this method has been called.
     */
    dispose(): void;
}
export {};
