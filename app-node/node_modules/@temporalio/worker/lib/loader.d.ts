/// <reference types="node" />
import { Stats } from 'fs';
import ivm from 'isolated-vm';
export declare class LoaderError extends Error {
    readonly name = "LoaderError";
}
export declare function statOrNull(path: string): Promise<Stats | null>;
export declare function findNodeModules(referrer: string, fsRoot?: string): Promise<string>;
export declare function resolveFilename(path: string, allowDir?: boolean): Promise<string>;
export declare type ModuleType = 'commonjs' | 'esmodule';
export interface ResolvedModule {
    path: string;
    type: ModuleType;
}
export declare function resolveModuleFromNodeModules(specifier: string, nodeModulesPath: string): Promise<ResolvedModule>;
export declare function resolveModule(specifier: string, referrer: string, moduleType: ModuleType): Promise<ResolvedModule>;
export declare function commonjsToEsModule(code: string): Promise<string>;
export declare class Loader {
    private readonly isolate;
    private readonly context;
    private readonly moduleCache;
    private readonly moduleOverrides;
    constructor(isolate: ivm.Isolate, context: ivm.Context);
    overrideModule(specifier: string, module: ivm.Module): void;
    loadModuleFromSource(code: string, resolved: ResolvedModule): Promise<ivm.Module>;
    loadModule(filename: string, moduleType?: ModuleType): Promise<ivm.Module>;
    protected moduleResolveCallback(specifier: string, referrer: ivm.Module): Promise<ivm.Module>;
}
