/**
 * Implement this interface in order to customize worker logging
 */
export interface Logger {
    debug(message: string, meta?: Record<string, any>): any;
    info(message: string, meta?: Record<string, any>): any;
    warn(message: string, meta?: Record<string, any>): any;
    error(message: string, meta?: Record<string, any>): any;
}
export declare type LogLevel = 'DEBUG' | 'INFO' | 'WARNING' | 'ERROR';
/**
 * Log messages using `console.error` and basic formatting
 */
declare function defaultLogFunction(level: LogLevel, message: string, meta?: Record<string, any>): void;
/**
 * Default worker logger - uses a default log function to log messages to `console.error`.
 * See constructor arguments for customization.
 */
export declare class DefaultLogger implements Logger {
    readonly level: LogLevel;
    protected readonly logFunction: typeof defaultLogFunction;
    protected readonly severity: number;
    constructor(level?: LogLevel, logFunction?: typeof defaultLogFunction);
    log(level: LogLevel, message: string, meta?: Record<string, any>): void;
    debug(message: string, meta?: Record<string, any>): void;
    info(message: string, meta?: Record<string, any>): void;
    warn(message: string, meta?: Record<string, any>): void;
    error(message: string, meta?: Record<string, any>): void;
}
export {};
