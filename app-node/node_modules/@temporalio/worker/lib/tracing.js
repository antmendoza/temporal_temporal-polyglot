"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.instrument = exports.childSpan = exports.tracer = void 0;
const otel = __importStar(require("@opentelemetry/api"));
// ../package.json is outside of the TS project rootDir which causes TS to complain about this import.
// We do not want to change the rootDir because it messes up the output structure.
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const package_json_1 = __importDefault(require("../package.json"));
exports.tracer = otel.trace.getTracer(package_json_1.default.name, package_json_1.default.version);
/**
 * Conveience function for creating a child span from an existing span
 */
function childSpan(parent, name, options) {
    const context = otel.setSpan(otel.context.active(), parent);
    return exports.tracer.startSpan(name, options, context);
}
exports.childSpan = childSpan;
/**
 * Wraps `fn` in a span which ends when function returns or throws
 */
async function instrument(parent, name, fn) {
    const context = otel.setSpan(otel.context.active(), parent);
    return otel.context.with(context, async () => {
        const span = exports.tracer.startSpan(name, undefined);
        try {
            const ret = await fn(span);
            span.setStatus({ code: otel.SpanStatusCode.OK });
            return ret;
        }
        catch (err) {
            span.setStatus({ code: otel.SpanStatusCode.ERROR, message: err.message });
            throw err;
        }
        finally {
            span.end();
        }
    });
}
exports.instrument = instrument;
