"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncLocalStorage = void 0;
/// Fallback implementation of AsyncLocalStorage for older node versions
const async_hooks_1 = require("async_hooks");
class AsyncLocalStorage {
    constructor() {
        this.asyncIdToResource = new Map();
        this.resourceToAsyncIds = new Map();
        this.unregisterQueue = new Set();
    }
    _register(resource, asyncId = async_hooks_1.executionAsyncId()) {
        this.asyncIdToResource.set(asyncId, resource);
        let asyncIds = this.resourceToAsyncIds.get(resource);
        if (asyncIds === undefined) {
            asyncIds = new Set();
            this.resourceToAsyncIds.set(resource, asyncIds);
        }
        asyncIds.add(asyncId);
    }
    _unregister(resource) {
        const asyncIds = this.resourceToAsyncIds.get(resource);
        if (asyncIds === undefined) {
            return;
        }
        for (const asyncId of asyncIds) {
            this.asyncIdToResource.delete(asyncId);
        }
        this.resourceToAsyncIds.delete(resource);
    }
    _link(id, trigger) {
        const resource = this.asyncIdToResource.get(trigger);
        if (resource) {
            this._register(resource, id);
        }
    }
    getStore() {
        return this.asyncIdToResource.get(async_hooks_1.executionAsyncId());
    }
    async run(store, callback, ...args) {
        if (this.resourceToAsyncIds.size === 0) {
            const firstRun = storageSet.size === 0;
            // First resource
            storageSet.add(this);
            if (firstRun) {
                hook.enable();
            }
        }
        this._register(store);
        try {
            return await callback(...args);
        }
        finally {
            this._unregister(store);
            if (this.resourceToAsyncIds.size === 0) {
                storageSet.delete(this);
                if (storageSet.size === 0) {
                    hook.disable();
                }
            }
        }
    }
}
exports.AsyncLocalStorage = AsyncLocalStorage;
const storageSet = new Set();
const hook = async_hooks_1.createHook({
    init: (id, _type, triggerId) => {
        for (const s of storageSet) {
            s._link(id, triggerId);
        }
    },
});
